package com.onlinemarket.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Component;
import org.springframework.jdbc.core.RowMapper;
import com.onlinemarket.entity.Catagory;
import com.onlinemarket.entity.CatagoryType;
import com.onlinemarket.entity.Cloths;
import com.onlinemarket.entity.Customers;
import com.onlinemarket.entity.Orders;
import com.onlinemarket.entity.Phones;
import com.onlinemarket.entity.Shoes;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import java.util.Map;
import java.util.Optional;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;


@Component
public class InsertOrderDao implements InsertOrderDaoInterface {

	
	@Autowired
	private NamedParameterJdbcTemplate jdbcTemplate;
	
	
	@Override
	public Orders saveOrder(Customers customer, Cloths cloth, Shoes shoe, Phones phone, int price, List<String>catagories ) {
		
	  
		
	SqlParams params = generateInsertSql(customer, cloth, shoe, phone, price);
		
	KeyHolder keyHolder= new GeneratedKeyHolder();
	jdbcTemplate.update(params.sql,params.source,keyHolder);
	
	Long orderPk = keyHolder.getKey().longValue();
//	saveCatagory(catagories, orderPk);
	//@formatter:off
		return Orders.builder()
				.orderPk(orderPk)
		        .customer(customer)
		        .shoes(shoe)
		        .cloths(cloth)
		        .phones(phone)
		        .catagories(catagories)
		        .price(price)
				.build();
		
				//@formatter:on
	}
	private void saveCatagory(List<String> catagories, Long orderPK) {
	  for(String catagory :catagories) {
		  SqlParams params = generateInsertSql(catagory, orderPK);
		  
		  jdbcTemplate.update(params.sql,params.source);
	  }
		
	}
	private SqlParams generateInsertSql(String catagory, Long orderPk) {
		
		
		SqlParams params = new SqlParams();
	    
	    // @formatter:off
	    params.sql = ""
	        + "INSERT INTO order_catagory ("
	        + "catagory_fk, order_fk"
	        + ") VALUES ("
	        + ":catagory_fk, :order_fk"
	        + ")";
	    // @formatter:on
	    
	    params.source.addValue("catagory_fk", catagory);
	    params.source.addValue("order_fk", orderPk);
	    
	    return params;
	}

	
	private SqlParams generateInsertSql(Customers customer,  Cloths cloth,  Shoes shoe , Phones phone ,int price) {
		
		  // @formatter:off
	    String sql = ""
	        + "INSERT INTO orders ("
	        + "customer_fk, shoes_fk, cloths_fk, phones_fk, price"
	        + ") VALUES ("
	        + ":customer_fk, :shoes_fk, :cloths_fk, :phones_fk, :price"
	        + ")";
	    // @formatter:on
	    
	    SqlParams params = new SqlParams();
	    
	    params.sql = sql;
	    params.source.addValue("customer_fk", customer.getCustomerPk());
	    params.source.addValue("cloths_fk", cloth.getClothPk());
	    params.source.addValue("phones_fk", phone.getPhonePk());
	    params.source.addValue("shoes_fk", shoe.getShoePk());
	    params.source.addValue("price", price);
	    
	    return params;
	}
	/**
		   * 
		   */
		  @Override
		  public List<String> fetchCatagory (Cloths cloth, Shoes shoe, Phones phone) {
			  
			 String  clothCatagory=  cloth.getCatagory().toString();
			 String shoesCatagory= shoe.getCatagory().toString();	
			 String phoneCatagory= phone.getCatagory().toString();
			 
			 List<String> catagories= new LinkedList<>();
					
			   catagories.add(clothCatagory);
			   catagories.add(shoesCatagory);
			   catagories.add(phoneCatagory);
			   return  catagories;
				
			 
		  }
	
	/**
	 * 
	 */
	
	@Override
	public Optional<Customers> fetchCustomer(String customerId) {
		
	String sql= ""
			+ "SELECT *  "
			+ "FROM customers "
			+ "WHERE customer_id = :customer_id";
	
	Map<String, Object>params =  new HashMap<>();
	params.put("customer_id", "John_Smith");
	
		return Optional.ofNullable(jdbcTemplate.query(sql, params, new CustomerResultSetExtractor()));
	}
	
	
	  /**
	   * 
	   */
	  @Override
	  public Optional<Cloths> fetchCloth(String clothId) {
	    // @formatter:off
	    String sql = "" 
	        + "SELECT * " 
	        + "FROM cloths "
	        + "WHERE cloth_id = :cloth_id " ;
	        
	    // @formatter:on

	    Map<String, Object> params = new HashMap<>();
	    params.put("cloth_id", "jeans");
	   return Optional.ofNullable(jdbcTemplate.query(sql, params, new ClothsResultSetExtractor()));
	
	  }
	  
	  /**
	   * 
	   */
	  @Override
	  public Optional<Shoes> fetchShoe(String shoeId) {
	    // @formatter:off
	    String sql = "" 
	        + "SELECT * " 
	        + "FROM shoes " 
	        + "WHERE shoe_id = :shoe_id";
	    // @formatter:on

	    Map<String, Object> params = new HashMap<>();
	    params.put("shoe_id", "boots");

	    return Optional.ofNullable(jdbcTemplate.query(sql, params, new ShoesResultSetExtractor()));
	  }
	  
	  /**
	   * 
	   */
	  @Override
	  public Optional<Phones> fetchPhone(String phoneId) {
	    // @formatter:off
	    String sql = "" 
	        + "SELECT * " 
	        + "FROM phones " 
	        + "WHERE phone_id = :phone_id";
	    // @formatter:on

	    Map<String, Object> params = new HashMap<>();
	    params.put("phone_id", "s22");

	    return Optional.ofNullable(jdbcTemplate.query(sql, params, new PhoneResultSetExtractor()));
	  }
	
	 
	
class CustomerResultSetExtractor implements ResultSetExtractor<Customers>{

	@Override
	public Customers extractData(ResultSet rs)
			throws SQLException, DataAccessException {
		rs.next();
		//@formatter:off
		return Customers.builder()
				.customerPk(rs.getInt("customer_pk"))			
				.customerId(rs.getString("customer_id"))	
				.firstName(rs.getString("first_name"))
				.lastName(rs.getString("last_name"))
				.phone(rs.getString("phone"))
				.build(); 
				//@formatter:on
	}
	
}

class ClothsResultSetExtractor implements ResultSetExtractor<Cloths> {
  @Override
  public Cloths extractData(ResultSet rs) throws SQLException {
    rs.next();

    // @formatter:off
    return Cloths.builder()
        .clothPk(rs.getInt("cloth_pk"))
        .clothId(rs.getString("cloth_id"))
        .clothSize(rs.getInt("cloth_size"))
        .clothColor(rs.getString("cloth_color"))
       // .catagory(CatagoryType.valueOf(rs.getString("catagory")))
        .price(rs.getInt("cloth_price"))
        .build();
    // @formatter:on  
  }
}


class ShoesResultSetExtractor implements ResultSetExtractor<Shoes> {
  @Override
  public Shoes extractData(ResultSet rs) throws SQLException {
    rs.next();

    // @formatter:off
    return Shoes.builder()
        .shoePk(rs.getInt("shoes_pk"))
        .shoeId(rs.getString("shoe_id"))
        .shoeColor(rs.getString("shoe_color"))
        .shoeSize(rs.getInt("shoe_size"))
       // .catagory(CatagoryType.valueOf(rs.getString("catagory")))
        .price(rs.getInt("price"))
        .build();
    // @formatter:on
  }
}



class PhoneResultSetExtractor implements ResultSetExtractor<Phones> {
  @Override
  public Phones extractData(ResultSet rs) throws SQLException {
    rs.next();

    // @formatter:off
    
    return Phones.builder()	  
        .phoneId(rs.getString("phone_id"))
        .phonePk(rs.getInt("phone_pk"))
        .phoneColor(rs.getString("phone_color"))
       // .catagory(CatagoryType.valueOf(rs.getString("catagory")))
        .price(rs.getInt("phone_price"))
        .build();
    
    // @formatter:on
  }
}


class SqlParams{
	String sql;
	MapSqlParameterSource source = new MapSqlParameterSource();
      

    }	
	
	
}
